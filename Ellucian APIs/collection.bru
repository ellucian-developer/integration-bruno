script:pre-request {
  const fetch = require("node-fetch");
  
  const tokenExpiresMinutes = 30
  const now = Date.now();
  const lastEthosAuthDate = bru.getEnvVar('ethosAuthDate');
  const baseUrl = bru.getEnvVar("ethosIntegrationUrl")
  const expiresTime = !lastEthosAuthDate ? now : Date.parse(lastEthosAuthDate) + 1000 * 60 * tokenExpiresMinutes;
  
  if (now + 1000 >= expiresTime) {
      const headers = {
          'Accept': 'application/json',
          'Authorization': 'Bearer ' + bru.getEnvVar('ethosApiKey')
      };
  
      try {
          const response = await fetch(bru.getEnvVar("ethosIntegrationUrl") + '/auth?expirationMinutes=' + tokenExpiresMinutes, {
              method: 'POST',
              headers
          });
  
          if (response.ok) {
              const data = await response.text();
              bru.setEnvVar("ethosApiToken", data);
              bru.setEnvVar('ethosAuthDate', new Date())
          }
      } catch (error) {
          console.log('Fetch error : ', error);
      }
  } else {
      console.log('Token still valid')
  }
  
  let hasAcceptHeader = false
  for (const header in req.getHeaders()) {
      if (header.toLowerCase() == "accept") {
          hasAcceptHeader = true
      }
      if (header.toLowerCase() == "authorization") {
          console.log("Has it Authorizations")
      }
  }
  
  if (!hasAcceptHeader) {
      req.setHeaders({
          ...req.getHeaders(),
          Accept: "application/json"
      })
  }
  
  function extractVariables(inputString) {
      const variablePattern = /{{(.*?)}}/g;
      const matches = [];
      let match;
  
      while ((match = variablePattern.exec(inputString)) !== null) {
          matches.push(match[1].trim());
      }
  
      return matches;
  }
  
  const urlString = req.url;
  const variables = extractVariables(urlString);
  console.log(variables);
  if (variables.length > 0) {
      for (let i = 0; i < variables.length; i++) {
          const envVar = bru.getEnvVar(variables[i]);
          let currentUrl = req.getUrl();
          currentUrl = currentUrl.replace(`{{${variables[i]}}}`, envVar);
          req.setUrl(currentUrl);
      }
  }
  
  if (
      req.getUrl().toString().substring(0, 4) !== "http" &&
      req.getUrl().toString().indexOf('auth') === -1
  ) {
      let currentUrl = req.getUrl();
      if (currentUrl.charAt(0) === "/") {
        currentUrl = currentUrl.substring(1);
      }
  
      req.setUrl(baseUrl + "/api/" + currentUrl)
  }
  
  if (req.getUrl().toString().indexOf('?') !== -1) {
      req.setUrl(encodeURI(req.getUrl().toString()))
  }
}
